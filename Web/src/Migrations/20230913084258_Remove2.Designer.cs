// <auto-generated />
using System;
using CodeRabbits.KaoList.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CodeRabbits.KaoList.Web.Migrations
{
    [DbContext(typeof(KaoListDataContext))]
    [Migration("20230913084258_Remove2")]
    partial class Remove2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CodeRabbits.KaoList.AppLog", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Log")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_100_CS_AS_KS_WS_SC_UTF8");

                    b.HasKey("Id");

                    b.ToTable("AppLogs");
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.CommentReport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CommentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_100_CS_AS_KS_WS_SC_UTF8");

                    b.Property<DateTime?>("CreateTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityToken")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NormalizedContent")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_100_CI_AI_SC_UTF8");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentReports", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.Head", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CS_AS_KS_WS_SC_UTF8");

                    b.Property<string>("NormalizedDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CI_AI_SC_UTF8");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedDisplayName")
                        .IsUnique()
                        .HasDatabaseName("HeadNormalizedDisplayNameIndex");

                    b.ToTable("Heads", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.HeadLocalized", b =>
                {
                    b.Property<string>("HeadId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("I18nName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Displayname")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CS_AS_KS_WS_SC_UTF8");

                    b.Property<string>("NormalizedDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CI_AI_SC_UTF8");

                    b.HasKey("HeadId", "I18nName");

                    b.HasIndex("I18nName");

                    b.HasIndex("NormalizedDisplayName")
                        .HasDatabaseName("HeadLocalizedNormalizedDisplayNameIndex");

                    b.ToTable("HeadLocalizeds", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.OriginalPost", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedTitle")
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CI_AI_SC_UTF8");

                    b.Property<int?>("PostId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CS_AS_KS_WS_SC_UTF8");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedTitle")
                        .HasDatabaseName("OriginalPostNormalizedTitleIndex");

                    b.HasIndex("PostId");

                    b.ToTable("OriginalPosts", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.OriginalPostComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_100_CS_AS_KS_WS_SC_UTF8");

                    b.Property<DateTime?>("CreateTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedComment")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_100_CI_AI_SC_UTF8");

                    b.Property<int?>("PostCommentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostCommentId");

                    b.ToTable("OriginalPostComments", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.Post", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<bool?>("Blinded")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedTitle")
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CI_AI_SC_UTF8");

                    b.Property<int?>("RemoveRequestTime")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CS_AS_KS_WS_SC_UTF8");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedTitle")
                        .HasDatabaseName("PostNormalizedTitleIndex");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.PostChart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDateTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedTitle")
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CI_AI_SC_UTF8");

                    b.Property<int?>("PostId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CS_AS_KS_WS_SC_UTF8");

                    b.Property<byte?>("VoteNumber")
                        .IsRequired()
                        .HasColumnType("tinyint");

                    b.Property<string>("VoteRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedTitle")
                        .HasDatabaseName("PostChartNormalizedTitleIndex");

                    b.HasIndex("PostId");

                    b.HasIndex("VoteRole");

                    b.ToTable("PostCharts", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.PostChartItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NormalizedTitle")
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CI_AI_SC_UTF8");

                    b.Property<string>("PostChartId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CS_AS_KS_WS_SC_UTF8");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedTitle")
                        .HasDatabaseName("PostChartItemNormalizedTitleIndex");

                    b.HasIndex("PostChartId");

                    b.ToTable("PostChartItems", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.PostChartVote", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostChartItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostChartItemId");

                    b.ToTable("PostChartVotes", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.PostChartVoteRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CS_AS_KS_WS_SC_UTF8");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CI_AI_SC_UTF8");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("PostChartVoteRoleNormalizedNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("PostChartVoteRoles", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.PostComment", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<bool?>("Blinded")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_100_CS_AS_KS_WS_SC_UTF8");

                    b.Property<int?>("CommentParent")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedComment")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_100_CI_AI_SC_UTF8");

                    b.Property<int?>("PostId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemoveRequestTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommentParent");

                    b.HasIndex("PostId");

                    b.ToTable("PostComments", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.PostCommentUser", b =>
                {
                    b.Property<int?>("PostCommantId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PostCommantId");

                    b.HasIndex("UserId");

                    b.ToTable("PostCommentUsers", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.PostHead", b =>
                {
                    b.Property<string>("HeadId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PostId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("HeadId");

                    b.HasIndex("PostId");

                    b.ToTable("PostHeads", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.PostHitLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PostId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostHitLogs", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.PostLike", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityToken")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PostId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostLikes", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.PostReport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_100_CS_AS_KS_WS_SC_UTF8");

                    b.Property<DateTime?>("CreateTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityToken")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NormalizedContent")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_100_CI_AI_SC_UTF8");

                    b.Property<int?>("PostId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostReports", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.PostUnlike", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityToken")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PostId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostUnlikes", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.PostUser", b =>
                {
                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostUsers", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Classfication", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedDisplayName")
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DisplayName")
                        .HasDatabaseName("ClassficationNameIndex");

                    b.ToTable("Classfications", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.ClassficationLocalized", b =>
                {
                    b.Property<string>("I18nName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClassficationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CS_AS_KS_WS_SC_UTF8");

                    b.Property<string>("NormalizedDisplayName")
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CI_AI_SC_UTF8");

                    b.HasKey("I18nName", "ClassficationId");

                    b.HasIndex("ClassficationId");

                    b.HasIndex("NormalizedDisplayName")
                        .HasDatabaseName("ClassficationLocalizedNormalizedDisplayNameIndex");

                    b.ToTable("ClassficationLocalizeds", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.I18n", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Name");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("I18nNormalizedNameIndex");

                    b.ToTable("I18ns", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Identity.KaoListUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NickName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CS_AS_KS_WS_SC_UTF8");

                    b.Property<DateTime?>("NickNameEditedDatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedNickName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CI_AI_SC_UTF8");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedNickName")
                        .HasDatabaseName("KaoListUserNormalizedNickNameIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("KaoListUsers", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Identity.KaoListUserBlind", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BlinedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "BlinedUserId");

                    b.HasIndex("BlinedUserId");

                    b.ToTable("KaoListUserBlinds", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Identity.KaoListUserChannel", b =>
                {
                    b.Property<string>("ChannelProvider")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChannelProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("KaoListUserChannels", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Identity.KaoListUserColor", b =>
                {
                    b.Property<int?>("Color")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("Color", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("KaoListUserColors", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Identity.KaoListUserDeleteReason", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime?>("CreateTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("KaoListUserDeleteReasons", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Identity.KaoListUserFollower", b =>
                {
                    b.Property<string>("FollowUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FollwerUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("FollowUserId", "FollwerUserId");

                    b.HasIndex("FollwerUserId");

                    b.ToTable("KaoListUserFollowers", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Identity.KaoListUserLanguage", b =>
                {
                    b.Property<string>("I18nName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("I18nName", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("KaoListUserLanguages", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Identity.KaoListUserLocalized", b =>
                {
                    b.Property<string>("I18nName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditedDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("I18nName", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("KaoListUserLocalizeds", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Identity.SignInAttempt", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime?>("CreateTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("IpAddress")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool?>("Successed")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SignInAttempts", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Playlist.KaoListPlaylist", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CS_AS_KS_WS_SC_UTF8");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CI_AI_SC_UTF8");

                    b.Property<string>("PrivacyStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("KaoListPlaylistNormalizedNameIndex");

                    b.HasIndex("PrivacyStatus");

                    b.HasIndex("UserId");

                    b.ToTable("KaoListPlaylist", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Playlist.KaoListPlaylistLocalized", b =>
                {
                    b.Property<string>("PlaylistId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("I18nName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CS_AS_KS_WS_SC_UTF8");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CI_AI_SC_UTF8");

                    b.HasKey("PlaylistId", "I18nName");

                    b.HasIndex("I18nName");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("KaoListPlaylistLocalizedNormalizedNameIndex");

                    b.ToTable("KaoListPlaylistLocalized", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Playlist.KaoListPlaylistPlayLog", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime?>("CreateTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlaylistId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("UserId");

                    b.ToTable("KaoListPlaylistPlayLog", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Playlist.KaoListPlaylistPrivacyState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("KaoListPlaylistPrivacyState", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Playlist.KaoListPlaylistShare", b =>
                {
                    b.Property<string>("PlaylistId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShareRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PlaylistId", "UserId");

                    b.HasIndex("ShareRole");

                    b.HasIndex("UserId");

                    b.ToTable("KaoListPlaylistShare", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Playlist.KaoListPlaylistShareRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("KaoListPlaylistShareRole", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Playlist.KaoListPlaylistSingItem", b =>
                {
                    b.Property<string>("PlaylistId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("PlaylistId", "SingId");

                    b.HasIndex("SingId");

                    b.ToTable("KaoListPlaylistSingItem", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Playlist.YouTubePlaylistShared", b =>
                {
                    b.Property<string>("YouTubePlaylistId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("YouTubePlaylistId", "UserId");

                    b.ToTable("YouTubePlaylistShared", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Playlist.YouTubePlaylistSyncInfo", b =>
                {
                    b.Property<string>("YouTubePlaylistId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlaylistId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("YouTubePlaylistId", "PlaylistId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("YouTubePlaylistSync", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.Instrumental", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Composer")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CI_AI_SC_UTF8");

                    b.Property<string>("SoundId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CS_AS_KS_WS_SC_UTF8");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedTitle")
                        .HasDatabaseName("InstrumentalNormalizedTitleIndex");

                    b.HasIndex("SoundId");

                    b.ToTable("Instrumentals", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.InstrumentalBlind", b =>
                {
                    b.Property<string>("InstrumentalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("InstrumentalId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("InstrumentalBlinds", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.InstrumentalClassification", b =>
                {
                    b.Property<string>("ClassficationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InstrumentalId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClassficationId", "InstrumentalId");

                    b.HasIndex("InstrumentalId");

                    b.ToTable("InstrumentalClassifications", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.InstrumentalFollower", b =>
                {
                    b.Property<string>("InstrumentalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("InstrumentalId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("InstrumentalFollowers", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.InstrumentalLocalized", b =>
                {
                    b.Property<string>("InstrumentalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("I18nName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CI_AI_SC_UTF8");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_100_CS_AS_KS_WS_SC_UTF8");

                    b.HasKey("InstrumentalId", "I18nName");

                    b.HasIndex("I18nName");

                    b.HasIndex("NormalizedTitle")
                        .HasDatabaseName("InstrumentalLocalizedNormalizedTitleIndex");

                    b.ToTable("InstrumentalLocalizeds", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.Karaoke", b =>
                {
                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("No")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("SingId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Provider", "No");

                    b.HasIndex("SingId");

                    b.ToTable("Karaokes", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.Lyric", b =>
                {
                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("InstrumentalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_100_CS_AS_KS_WS_SC_UTF8");

                    b.Property<TimeSpan?>("Duration")
                        .IsRequired()
                        .HasColumnType("time");

                    b.Property<string>("NormalizedContent")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_100_CI_AI_SC_UTF8");

                    b.Property<TimeSpan?>("Offset")
                        .IsRequired()
                        .HasColumnType("time");

                    b.HasKey("Sequence", "InstrumentalId");

                    b.HasIndex("InstrumentalId");

                    b.ToTable("Lyrics", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.PopularSing", b =>
                {
                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("SingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Score")
                        .IsRequired()
                        .HasColumnType("float");

                    b.HasKey("Created", "SingId");

                    b.HasIndex("SingId");

                    b.ToTable("PopularSings", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.Sing", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("InstrumentalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SoundId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentalId");

                    b.HasIndex("SoundId");

                    b.ToTable("Sings", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.SingBlind", b =>
                {
                    b.Property<string>("SingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("SingId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SingBlinds", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.SingFollower", b =>
                {
                    b.Property<string>("SingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("SingId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SingFollowers", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.SingUser", b =>
                {
                    b.Property<string>("SingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SingId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SingUsers", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.SongSearchLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Query")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SongSearchLogs", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.Sound", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sounds", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.SoundPlayLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SoundId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SoundId");

                    b.HasIndex("UserId");

                    b.ToTable("SoundPlayLogs", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.SoundPlaylogDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("CurrentTime")
                        .IsRequired()
                        .HasColumnType("time");

                    b.Property<string>("SoundPlayLogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SoundPlayLogId");

                    b.ToTable("SoundPlaylogDetails", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.TitleSing", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InstrumentalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SingId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "InstrumentalId");

                    b.HasIndex("InstrumentalId");

                    b.HasIndex("SingId");

                    b.ToTable("TitleSings", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("KaoListRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("KaoListClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("KaoListUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("KaoListUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("KaoListUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("KaoListUserTokens", (string)null);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.CommentReport", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Board.PostComment", null)
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.HeadLocalized", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Board.Head", null)
                        .WithMany()
                        .HasForeignKey("HeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.I18n", null)
                        .WithMany()
                        .HasForeignKey("I18nName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.OriginalPost", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Board.Post", null)
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.OriginalPostComment", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Board.PostComment", null)
                        .WithMany()
                        .HasForeignKey("PostCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.PostChart", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Board.Post", null)
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Board.PostChartVoteRole", null)
                        .WithMany()
                        .HasForeignKey("VoteRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.PostChartItem", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Board.PostChart", null)
                        .WithMany()
                        .HasForeignKey("PostChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.PostChartVote", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Board.PostChart", null)
                        .WithMany()
                        .HasForeignKey("PostChartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.PostComment", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Board.PostComment", null)
                        .WithMany()
                        .HasForeignKey("CommentParent")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CodeRabbits.KaoList.Board.Post", null)
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.PostCommentUser", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Board.PostComment", null)
                        .WithMany()
                        .HasForeignKey("PostCommantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.PostHead", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Board.Head", null)
                        .WithMany()
                        .HasForeignKey("HeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Board.Post", null)
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.PostHitLog", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Board.Post", null)
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.PostLike", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Board.Post", null)
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.PostReport", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Board.Post", null)
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.PostUnlike", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Board.Post", null)
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Board.PostUser", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Board.Post", null)
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.ClassficationLocalized", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Classfication", null)
                        .WithMany()
                        .HasForeignKey("ClassficationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.I18n", null)
                        .WithMany()
                        .HasForeignKey("I18nName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Identity.KaoListUserBlind", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("BlinedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Identity.KaoListUserChannel", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Identity.KaoListUserColor", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Identity.KaoListUserFollower", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("FollowUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("FollwerUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Identity.KaoListUserLanguage", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.I18n", null)
                        .WithMany()
                        .HasForeignKey("I18nName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Identity.KaoListUserLocalized", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.I18n", null)
                        .WithMany()
                        .HasForeignKey("I18nName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Identity.SignInAttempt", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Playlist.KaoListPlaylist", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Playlist.KaoListPlaylistPrivacyState", null)
                        .WithMany()
                        .HasForeignKey("PrivacyStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Playlist.KaoListPlaylistLocalized", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.I18n", null)
                        .WithMany()
                        .HasForeignKey("I18nName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Playlist.KaoListPlaylist", null)
                        .WithMany()
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Playlist.KaoListPlaylistPlayLog", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Playlist.KaoListPlaylist", null)
                        .WithMany()
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Playlist.KaoListPlaylistShare", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Playlist.KaoListPlaylist", null)
                        .WithMany()
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Playlist.KaoListPlaylistShareRole", null)
                        .WithMany()
                        .HasForeignKey("ShareRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Playlist.KaoListPlaylistSingItem", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Playlist.KaoListPlaylist", null)
                        .WithMany()
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Song.Sing", null)
                        .WithMany()
                        .HasForeignKey("SingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Playlist.YouTubePlaylistSyncInfo", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Playlist.KaoListPlaylist", null)
                        .WithMany()
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Playlist.YouTubePlaylistShared", null)
                        .WithMany()
                        .HasForeignKey("YouTubePlaylistId")
                        .HasPrincipalKey("YouTubePlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.Instrumental", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Song.Sound", null)
                        .WithMany()
                        .HasForeignKey("SoundId");
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.InstrumentalBlind", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.InstrumentalClassification", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Classfication", null)
                        .WithMany()
                        .HasForeignKey("ClassficationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Song.Instrumental", null)
                        .WithMany()
                        .HasForeignKey("InstrumentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.InstrumentalFollower", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Song.Instrumental", null)
                        .WithMany()
                        .HasForeignKey("InstrumentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.InstrumentalLocalized", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.I18n", null)
                        .WithMany()
                        .HasForeignKey("I18nName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Song.Instrumental", null)
                        .WithMany()
                        .HasForeignKey("InstrumentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.Karaoke", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Song.Sing", null)
                        .WithMany()
                        .HasForeignKey("SingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.Lyric", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Song.Instrumental", null)
                        .WithMany()
                        .HasForeignKey("InstrumentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.PopularSing", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Song.Sing", null)
                        .WithMany()
                        .HasForeignKey("SingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.Sing", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Song.Instrumental", null)
                        .WithMany()
                        .HasForeignKey("InstrumentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Song.Sound", null)
                        .WithMany()
                        .HasForeignKey("SoundId");
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.SingBlind", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Song.Sing", null)
                        .WithMany()
                        .HasForeignKey("SingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.SingFollower", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Song.Sing", null)
                        .WithMany()
                        .HasForeignKey("SingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.SingUser", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Song.Sing", null)
                        .WithMany()
                        .HasForeignKey("SingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.SongSearchLog", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.SoundPlayLog", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Song.Sound", null)
                        .WithMany()
                        .HasForeignKey("SoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.SoundPlaylogDetail", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Song.SoundPlayLog", null)
                        .WithMany()
                        .HasForeignKey("SoundPlayLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeRabbits.KaoList.Song.TitleSing", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Song.Instrumental", null)
                        .WithMany()
                        .HasForeignKey("InstrumentalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Song.Sing", null)
                        .WithMany()
                        .HasForeignKey("SingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CodeRabbits.KaoList.Identity.KaoListUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
